import type { CreateSelectorFunction } from './createSelectorCreator'
import { createSelectorCreator } from './createSelectorCreator'

import { defaultMemoize } from './defaultMemoize'
import type {
  Combiner,
  CreateSelectorOptions,
  CurriedOutputSelector,
  DropFirstParameter,
  InterruptRecursion,
  SelectorArray,
  Simplify,
  UnknownMemoizer
} from './types'

/**
 * An instance of `createCurriedSelector`, customized with a given memoize implementation.
 *
 * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createCurriedSelector` (e.g., `defaultMemoize` or `weakMapMemoize`).
 * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createCurriedSelector` (e.g., `defaultMemoize` or `weakMapMemoize`). If none is explicitly provided, `defaultMemoize` will be used.
 *
 * @since 5.0.0
 * @public
 * @experimental
 */
export interface CreateCurriedSelector<
  MemoizeFunction extends UnknownMemoizer = typeof defaultMemoize,
  ArgsMemoizeFunction extends UnknownMemoizer = typeof defaultMemoize
> {
  /**
   * Creates a memoized "curried" selector function.
   *
   * @param createSelectorArgs - An arbitrary number of input selectors as separate inline arguments and a `combiner` function.
   * @returns A memoized "curried" output selector.
   *
   * @template InputSelectors - The type of the input selectors as an array.
   * @template Result - The return type of the `combiner` as well as the output selector.
   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.
   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.
   *
   * @since 5.0.0
   * @public
   * @experimental
   */
  <InputSelectors extends SelectorArray, Result>(
    ...createSelectorArgs: [
      ...inputSelectors: InputSelectors,
      combiner: Combiner<InputSelectors, Result>
    ]
  ): CurriedOutputSelector<
    InputSelectors,
    Result,
    MemoizeFunction,
    ArgsMemoizeFunction
  > &
    InterruptRecursion

  /**
   * Creates a memoized "curried" selector function.
   *
   * @param createSelectorArgs - An arbitrary number of input selectors as separate inline arguments, a `combiner` function and an `options` object.
   * @returns A memoized "curried" output selector.
   *
   * @template InputSelectors - The type of the input selectors as an array.
   * @template Result - The return type of the `combiner` as well as the output selector.
   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.
   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.
   *
   * @since 5.0.0
   * @public
   * @experimental
   */
  <
    InputSelectors extends SelectorArray,
    Result,
    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,
    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction
  >(
    ...createSelectorArgs: [
      ...inputSelectors: InputSelectors,
      combiner: Combiner<InputSelectors, Result>,
      createSelectorOptions: Simplify<
        CreateSelectorOptions<
          MemoizeFunction,
          ArgsMemoizeFunction,
          OverrideMemoizeFunction,
          OverrideArgsMemoizeFunction
        >
      >
    ]
  ): CurriedOutputSelector<
    InputSelectors,
    Result,
    OverrideMemoizeFunction,
    OverrideArgsMemoizeFunction
  > &
    InterruptRecursion

  /**
   * Creates a memoized "curried" selector function.
   *
   * @param inputSelectors - An array of input selectors.
   * @param combiner - A function that Combines the input selectors and returns an output selector. Otherwise known as the result function.
   * @param createSelectorOptions - An optional options object that allows for further customization per selector.
   * @returns A memoized "curried" output selector.
   *
   * @template InputSelectors - The type of the input selectors array.
   * @template Result - The return type of the `combiner` as well as the output selector.
   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.
   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.
   *
   * @since 5.0.0
   * @public
   * @experimental
   */
  <
    InputSelectors extends SelectorArray,
    Result,
    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,
    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction
  >(
    inputSelectors: [...InputSelectors],
    combiner: Combiner<InputSelectors, Result>,
    createSelectorOptions?: Simplify<
      CreateSelectorOptions<
        MemoizeFunction,
        ArgsMemoizeFunction,
        OverrideMemoizeFunction,
        OverrideArgsMemoizeFunction
      >
    >
  ): CurriedOutputSelector<
    InputSelectors,
    Result,
    OverrideMemoizeFunction,
    OverrideArgsMemoizeFunction
  > &
    InterruptRecursion
}
/**
 * Creates a "curried" selector creator function with the specified memoization function and options for customizing memoization behavior.
 *
 * @param createSelectorCreatorArgs - Same parameters as {@linkcode createSelectorCreator createSelectorCreator}
 * @returns A customized `createCurriedSelector` function.
 *
 * @example
 * ```ts
 * import { createCurriedSelectorCreator, createSelector, weakMapMemoize } from 'reselect'
 * import { useSelector } from 'react-redux'
 *
 * interface RootState {
 *   todos: { id: number; completed: boolean }[]
 *   alerts: { id: number; read: boolean }[]
 * }
 *
 * const state: RootState = {
 *   todos: [
 *     { id: 0, completed: false },
 *     { id: 1, completed: true }
 *   ],
 *   alerts: [
 *     { id: 0, read: false },
 *     { id: 1, read: true }
 *   ]
 * }
 *
 * const parametricSelector = createSelector(
 *   [(state: RootState) => state.todos, (state: RootState, id: number) => id],
 *   (todos, id) => todos.filter(todo => todo.id === id),
 *   { memoize: weakMapMemoize, argsMemoize: weakMapMemoize }
 * )
 *
 * const createCurriedSelectorWeakMap = createCurriedSelectorCreator({ memoize: weakMapMemoize, argsMemoize: weakMapMemoize })
 *
 * const curriedSelector = createCurriedSelectorWeakMap(
 *   [(state: RootState) => state.todos, (state: RootState, id: number) => id],
 *   (todos, id) => todos.filter(todo => todo.id === id)
 * )
 *
 * // This:
 * parametricSelector(state, 0)
 *
 * // Is the same as this:
 * curriedSelector(0)(state)
 *
 * // Inside your component you can replace this:
 * const selectTodo = useSelector(state => parametricSelector(state, id))
 *
 * // With this:
 * const selectTodo = useSelector(curriedSelector(id))
 * ```
 *
 * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createCurriedSelector` (e.g., `defaultMemoize` or `weakMapMemoize`).
 * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createCurriedSelector` (e.g., `defaultMemoize` or `weakMapMemoize`). If none is explicitly provided, `defaultMemoize` will be used.
 *
 * @since 5.0.0
 * @public
 * @experimental
 */
export function createCurriedSelectorCreator<
  MemoizeFunction extends UnknownMemoizer = typeof defaultMemoize,
  ArgsMemoizeFunction extends UnknownMemoizer = typeof defaultMemoize
>(...createSelectorCreatorArgs: Parameters<typeof createSelectorCreator>) {
  const createSelector = createSelectorCreator(...createSelectorCreatorArgs)

  const createCurriedSelector = (
    ...createSelectorArgs: Parameters<
      CreateSelectorFunction<MemoizeFunction, ArgsMemoizeFunction>
    >
  ) => {
    // @ts-ignore
    const selector = createSelector.apply(null, createSelectorArgs)
    const curriedSelector = selector.argsMemoize(
      (...params: DropFirstParameter<typeof selector>) => {
        return selector.argsMemoize((state: Parameters<typeof selector>[0]) => {
          return selector(state, ...params)
        })
      }
    )
    return Object.assign(curriedSelector, selector) as CurriedOutputSelector
  }
  return createCurriedSelector as unknown as CreateCurriedSelector<
    MemoizeFunction,
    ArgsMemoizeFunction
  >
}

/**
 * Accepts one or more "input selectors" (either as separate arguments or a single array),
 * a single "result function" / "combiner", and an optional options object, and
 * generates a memoized "curried" selector function.
 *
 * @example
 * ```ts
 * import { createCurriedSelector, createSelector } from 'reselect'
 * import { useSelector } from 'react-redux'
 *
 * interface RootState {
 *   todos: { id: number; completed: boolean }[]
 *   alerts: { id: number; read: boolean }[]
 * }
 *
 * const state: RootState = {
 *   todos: [
 *     { id: 0, completed: false },
 *     { id: 1, completed: true }
 *   ],
 *   alerts: [
 *     { id: 0, read: false },
 *     { id: 1, read: true }
 *   ]
 * }
 *
 * const parametricSelector = createSelector(
 *   [(state: RootState) => state.todos, (state: RootState, id: number) => id],
 *   (todos, id) => todos.filter(todo => todo.id === id)
 * )
 *
 * // This:
 * parametricSelector(state, 0)
 *
 * const curriedSelector = createCurriedSelector(
 *   [(state: RootState) => state.todos, (state: RootState, id: number) => id],
 *   (todos, id) => todos.filter(todo => todo.id === id)
 * )
 *
 * // Is the same as this:
 * curriedSelector(0)(state)
 *
 * // Inside your component you can replace this:
 * const selectTodo = useSelector(state => parametricSelector(state, id))
 *
 * // With this:
 * const selectTodo = useSelector(curriedSelector(id))
 * ```
 *
 * @since 5.0.0
 * @public
 * @experimental
 */
export const createCurriedSelector =
  /* #__PURE__ */ createCurriedSelectorCreator(defaultMemoize)
